pub fn print_instruction(slice: &[u8]) {
	/*
	match slice[0] {
		0x00 => println!("NOP"),
		0x01 => println!("LD BC, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0x02 => println!("LD (BC), A"),
		0x03 => println!("INC BC"),
		0x04 => println!("INC B"),
		0x05 => println!("DEC B"),
		0x06 => println!("LD B, {:X}", slice[1]),
		0x07 => println!("RLCA"),
		0x08 => println!("LD ({:X}), SP", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0x09 => println!("ADD HL, BC"),
		0x0A => println!("LD A, (BC)"),
		0x0B => println!("DEC BC"),
		0x0C => println!("INC C"),
		0x0D => println!("DEC C"),
		0x0E => println!("LD C, {:X}", slice[1]),
		0x0F => println!("RRCA"),
		0x10 => println!("STOP"),
		0x11 => println!("LD DE, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0x12 => println!("LD (DE), A"),
		0x13 => println!("INC DE"),
		0x14 => println!("INC D"),
		0x15 => println!("DEC D"),
		0x16 => println!("LD D, {:X}", slice[1]),
		0x17 => println!("RLA"),
		0x18 => println!("JR {:X}", slice[1] as i8),
		0x19 => println!("ADD HL, DE"),
		0x1A => println!("LD A, (DE)"),
		0x1B => println!("DEC DE"),
		0x1C => println!("INC E"),
		0x1D => println!("DEC E"),
		0x1E => println!("LD E, {:X}", slice[1]),
		0x1F => println!("RRA"),
		0x20 => println!("JR NZ, {:X}", slice[1] as i8),
		0x21 => println!("LD HL, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0x22 => println!("LD (HL+), A"),
		0x23 => println!("INC HL"),
		0x24 => println!("INC H"),
		0x25 => println!("DEC H"),
		0x26 => println!("LD H, {:X}", slice[1]),
		0x27 => println!("DAA"),
		0x28 => println!("JR Z, {:X}", slice[1] as i8),
		0x29 => println!("ADD HL, HL"),
		0x2A => println!("LD A, (HL+)"),
		0x2B => println!("DEC HL"),
		0x2C => println!("INC L"),
		0x2D => println!("DEC L"),
		0x2E => println!("LD L, {:X}", slice[1]),
		0x2F => println!("CPL"),
		0x30 => println!("JR NC, {:X}", slice[1] as i8),
		0x31 => println!("LD SP, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0x32 => println!("LD (HL-), A"),
		0x33 => println!("INC SP"),
		0x34 => println!("INC (HL)"),
		0x35 => println!("DEC (HL)"),
		0x36 => println!("LD (HL), {:X}", slice[1]),
		0x37 => println!("SCF"),
		0x38 => println!("JR C, {:X}", slice[1] as i8),
		0x39 => println!("ADD HL, SP"),
		0x3A => println!("LD A, (HL-)"),
		0x3B => println!("DEC SP"),
		0x3C => println!("INC A"),
		0x3D => println!("DEC A"),
		0x3E => println!("LD A, {:X}", slice[1]),
		0x3F => println!("CCF"),
		0x40 => println!("LD B, B"),
		0x41 => println!("LD B, C"),
		0x42 => println!("LD B, D"),
		0x43 => println!("LD B, E"),
		0x44 => println!("LD B, H"),
		0x45 => println!("LD B, L"),
		0x46 => println!("LD B, (HL)"),
		0x47 => println!("LD B, A"),
		0x48 => println!("LD C, B"),
		0x49 => println!("LD C, C"),
		0x4A => println!("LD C, D"),
		0x4B => println!("LD C, E"),
		0x4C => println!("LD C, H"),
		0x4D => println!("LD C, L"),
		0x4E => println!("LD C, (HL)"),
		0x4F => println!("LD C, A"),
		0x50 => println!("LD D, B"),
		0x51 => println!("LD D, C"),
		0x52 => println!("LD D, D"),
		0x53 => println!("LD D, E"),
		0x54 => println!("LD D, H"),
		0x55 => println!("LD D, L"),
		0x56 => println!("LD D, (HL)"),
		0x57 => println!("LD D, A"),
		0x58 => println!("LD E, B"),
		0x59 => println!("LD E, C"),
		0x5A => println!("LD E, D"),
		0x5B => println!("LD E, E"),
		0x5C => println!("LD E, H"),
		0x5D => println!("LD E, L"),
		0x5E => println!("LD E, (HL)"),
		0x5F => println!("LD E, A"),
		0x60 => println!("LD H, B"),
		0x61 => println!("LD H, C"),
		0x62 => println!("LD H, D"),
		0x63 => println!("LD H, E"),
		0x64 => println!("LD H, H"),
		0x65 => println!("LD H, L"),
		0x66 => println!("LD H, (HL)"),
		0x67 => println!("LD H, A"),
		0x68 => println!("LD L, B"),
		0x69 => println!("LD L, C"),
		0x6A => println!("LD L, D"),
		0x6B => println!("LD L, E"),
		0x6C => println!("LD L, H"),
		0x6D => println!("LD L, L"),
		0x6E => println!("LD L, (HL)"),
		0x6F => println!("LD L, A"),
		0x70 => println!("LD (HL), B"),
		0x71 => println!("LD (HL), C"),
		0x72 => println!("LD (HL), D"),
		0x73 => println!("LD (HL), E"),
		0x74 => println!("LD (HL), H"),
		0x75 => println!("LD (HL), L"),
		0x76 => println!("HALT"),
		0x77 => println!("LD (HL), A"),
		0x78 => println!("LD A, B"),
		0x79 => println!("LD A, C"),
		0x7A => println!("LD A, D"),
		0x7B => println!("LD A, E"),
		0x7C => println!("LD A, H"),
		0x7D => println!("LD A, L"),
		0x7E => println!("LD A, (HL)"),
		0x7F => println!("LD A, A"),
		0x80 => println!("ADD A, B"),
		0x81 => println!("ADD A, C"),
		0x82 => println!("ADD A, D"),
		0x83 => println!("ADD A, E"),
		0x84 => println!("ADD A, H"),
		0x85 => println!("ADD A, L"),
		0x86 => println!("ADD A, (HL)"),
		0x87 => println!("ADD A, A"),
		0x88 => println!("ADC A, B"),
		0x89 => println!("ADC A, C"),
		0x8A => println!("ADC A, D"),
		0x8B => println!("ADC A, E"),
		0x8C => println!("ADC A, H"),
		0x8D => println!("ADC A, L"),
		0x8E => println!("ADC A, (HL)"),
		0x8F => println!("ADC A, A"),
		0x90 => println!("SUB A, B"),
		0x91 => println!("SUB A, C"),
		0x92 => println!("SUB A, D"),
		0x93 => println!("SUB A, E"),
		0x94 => println!("SUB A, H"),
		0x95 => println!("SUB A, L"),
		0x96 => println!("SUB A, (HL)"),
		0x97 => println!("SUB A, A"),
		0x98 => println!("SBC A, B"),
		0x99 => println!("SBC A, C"),
		0x9A => println!("SBC A, D"),
		0x9B => println!("SBC A, E"),
		0x9C => println!("SBC A, H"),
		0x9D => println!("SBC A, L"),
		0x9E => println!("SBC A, (HL)"),
		0x9F => println!("SBC A, A"),
		0xA0 => println!("AND B"),
		0xA1 => println!("AND C"),
		0xA2 => println!("AND D"),
		0xA3 => println!("AND E"),
		0xA4 => println!("AND H"),
		0xA5 => println!("AND L"),
		0xA6 => println!("AND (HL)"),
		0xA7 => println!("AND A"),
		0xA8 => println!("XOR B"),
		0xA9 => println!("XOR C"),
		0xAA => println!("XOR D"),
		0xAB => println!("XOR E"),
		0xAC => println!("XOR H"),
		0xAD => println!("XOR L"),
		0xAE => println!("XOR (HL)"),
		0xAF => println!("XOR A"),
		0xB0 => println!("OR B"),
		0xB1 => println!("OR C"),
		0xB2 => println!("OR D"),
		0xB3 => println!("OR E"),
		0xB4 => println!("OR H"),
		0xB5 => println!("OR L"),
		0xB6 => println!("OR (HL)"),
		0xB7 => println!("OR A"),
		0xB8 => println!("CP B"),
		0xB9 => println!("CP C"),
		0xBA => println!("CP D"),
		0xBB => println!("CP E"),
		0xBC => println!("CP H"),
		0xBD => println!("CP L"),
		0xBE => println!("CP (HL)"),
		0xBF => println!("CP A"),
		0xC0 => println!("RET NZ"),
		0xC1 => println!("POP BC"),
		0xC2 => println!("JP NZ, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0xC3 => println!("JP {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0xC4 => println!("CALL NZ, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0xC5 => println!("PUSH BC"),
		0xC6 => println!("ADD A, {:X}", slice[1]),
		0xC7 => println!("RST 00H"),
		0xC8 => println!("RET Z"),
		0xC9 => println!("RET"),
		0xCA => println!("JP Z, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0xCB => print_extended_instruction(slice),
		0xCC => println!("CALL Z, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0xCD => println!("CALL {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0xCE => println!("ADD A, {:X}", slice[1]),
		0xCF => println!("RST 08H"),
		0xD0 => println!("RET NC"),
		0xD1 => println!("POP DE"),
		0xD2 => println!("JP NZ, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		//D3 INVALID
		0xD4 => println!("CALL NC, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0xD5 => println!("PUSH DE"),
		0xD6 => println!("SUB {:X}", slice[1]),
		0xD7 => println!("RST 10H"),
		0xD8 => println!("RET C"),
		0xD9 => println!("RETI"),
		0xDA => println!("JP C, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		//DB INVALID
		0xDC => println!("CALL C, {:X}", (((slice[2] as u16) << 8) | slice[1] as u16)),
		//DD INVALID
		0xDE => println!("SBC A, {:X}", slice[1]),
		0xDF => println!("RST 18H"),
		0xE0 => println!("LD (FF00 + {:X}), A", slice[1]),
		0xE1 => println!("POP HL"),
		0xE2 => println!("LD (C), A"),
		//E3..E4 INVALID
		0xE5 => println!("PUSH HL"),
		0xE6 => println!("AND d8"),
		0xE7 => println!("RST 20H"),
		0xE8 => println!("ADD SP, {:X}", slice[1] as i8),
		0xE9 => println!("JP HL"),
		0xEA => println!("LD ({:X}), A", (((slice[2] as u16) << 8) | slice[1] as u16)),
		//EB..ED
		0xEE => println!("XOR {:X}", slice[1]),
		0xEF => println!("RST 28H"),
		0xF0 => println!("LD A, (FF00 + {:X})", slice[1]),
		0xF1 => println!("POP AF"),
		0xF2 => println!("LD A, (C)"),
		0xF3 => println!("DI"),
		//F4 INVALID
		0xF5 => println!("PUSH AF"),
		0xF6 => println!("OR {:X}", slice[1]),
		0xF7 => println!("RST 30H"),
		0xF8 => println!("LD HL, SP+{:X}", slice[1] as i8),
		0xF9 => println!("LD SP, HL"),
		0xFA => println!("LD A, ({:X})", (((slice[2] as u16) << 8) | slice[1] as u16)),
		0xFB => println!("EI"),
		//FC..FD INVALID
		0xFE => println!("CP {:X}", slice[1]),
		0xFF => println!("RST 38H"),
		_ => println!("Invalid opcode {:X}", slice[0]),
	} */
}

fn print_extended_instruction(slice: &[u8]) {
	panic!("Extended opcodes not implemented for debugger");
}
